Папка с резервными копиями называется репозиторий. В нем храниятся изменения в виде отдельных файлов, которые сливаются в один.

"commit" - сохранить изменения в резервную папку с указанием в комментариях о проделанной работе.

"ветки" - когда мы хотим поработать над определенной фичей проекта в отдельной копии проекта

Поработав над фичей в отдельной ветке, можно слить готовый код с нашей основной веткой. При этом Git будет отслеживать файлы, которые принадлежат одновременно разным веткам. И, если изменения в них конфликтуют, то при слиянии Git укажет на это 

!первоначальные настройки сохраняются и после обновления версии

! Все настройки сохраняются в gitconfig. Данная утилита также определяет особенности операций в Git и, в целом, интерфейс системы

	$git config --list --show-origin
\\ выдает настройки системы

!Git автоматически оставляет имя автора куска кода и его email для связи

чтобы имя пользователя применялось ко всем проектам, с которыми вы работаете, в команду добавляется опция:

	--global:


	$git config --global user.name "MyUser"
	$git config --global user.email MyUser@mail.com

Если же в каком-нибудь конкретном проекте нужно изменить имя пользователя или его почту:

	$git config user.name "MyUser"
	$git config user.email MyUser@mail.com


!необходимо выбрать текстовой редактор для отправки сообщений в Git.

	$git config --global core.editor "'C:/Windows/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

!Git создает для главную ветку с именем master, в которой будет хранится основной репозиторий с проектом. Есть возможность назначить любое имя для главной ветки

	$git config --global init.defaultBranch Gayb

	$git config --list
	//просмотр всех настроек
	$git config core.editor
	//конкретная настройка



!репозиторий хранится в специальной папке .git внутри вашего проекта. Для начала работы в папке с проектом нужно 

	$git init


!приступить к работе:
1) нужно изменить состояние файла с неотслеживаемого на отслеживаемый

	$git status 
	//статучс файлов

	$git add index.html (можно указать папку или точку)
	// включение отслеживания
*вновь добавленные файлы в отслеживаемую папку по умолчанию не отслеживаемые (просто повторить отслеживание папки)
* точка это все файлы в проекте

2) нужно указать в какой момент запоминать состояние файла для последующего коммита. При изменении отслеживаемого файла он добавится в разряд "модифицированных". Дело в том, что Git сохраняет (индексирует) именно текущее состояние файла. Под состоянием понимается текущий текст файла, а также создан он или удален. Если же файл изменен, то просто так его изменения не сохранятся (не проиндексируются) в Git. Для этого нужно снова выполнить команду add. Фактически эту команду следует рассматривать как добавление текущего состояния файла к новому коммиту.


Выполнение коммита:

	$git commit -m "мой первый коммит"

	$git commit 
	// в этом случае комментарий будет в файле

!Файл может принимать три состояния: изменен (modified), индексирован (staged) и зафиксирован (committed)



Короткая форма статуса:
	$git status -short
	$git status -s

нет буквы 	unmodified
M 	modified
T 	file type changed
A 	added
D 	deleted
R 	renamed
C 	copied
U 	updated but unmerged

!Игнорирование файлов:
делается с помощью специального файла .gitignore, размещаемого в папке с проектом. В этом файле на каждой строке нужно писать путь к файлу или папке, которые мы хотим игнорировать
/debug.log - файл в корне репозитория
debug.log - файлы и в подпапках
logs/ - папки
**/logs - все папки содержащую такую подпапку в пути
**/logs/debug.log - ля сопоставления файлов на основе их имени и имени родительской папки:
*.log - Одна звездочка — это подстановочный знак, который может соответствовать как нескольким символам, так и ни одному


!Просмотр изменений после индексации

	$git diff

!Пропуск индексации измененных файлов и сразу в коммит

	$git commit -a


! Удаление файлов 
При работе с Git нельзя вручную удалять файлы из папки с проектом. Если сделать это, то после проверки командой status, он будет отображаться в категории 'Changes not staged for commit' как измененный, но не проиндексированный файл. 

	$git rm text.txt
	\\полностью удаляет файл

!Переименование файлов

	$git mv old.txt new.txt


!Перемещение файлов 
Команда mv также используется для перемещения файлов.

	$git mv old/file.txt new/file.txt

! Просмотр истории коммитов
	
	$git log
	//Можно вывести не все, а только заданное количество последних коммитовля этого к команде log нужно добавить флаг с числом

	$git log -3


! Флаги истории коммитов
K команде log можно добавлять специальные флаги

-p 	Показывает разницу в изменениях каждого коммита.

--stat 	Отображает статистику для коммита.

--shortstat 	Показывает количество изменений/вставок/удалений при применении команды --stat.

--name-only 	Отображает информацию о коммите и имена измененных файлов.

--name-status 	Выводит сообщение о списке файлов, которые были изменены, в т.ч. добавлены и удалены.

--relative-date 	Отображает дату применения изменений в относительном формате (например, '1 day ago').

--pretty 	Меняет формат вывода истории коммитов: =oneline в одну строку, =full - полный и =short - краткий вывод.

--graph 	Показывает ветвление веток Git и историю их слияний.


!Редактирование коммита
Когда коммит отправлен неверно есть возможность отправить исправленный коммит, который будет принят вместо предыдущего коммита. Для этого сначала вносите правки, индексируете их, а затем

	$git commit --amend

!Отмена индексации файла
используется команда restore, с флагом --staged, после которого добавляется имя файла

	$git restore --staged file.txt

!Отмена изменений в файле
вернуть его в исходный видсначала внесем изменения в файл file.txt и отследим его статус git status
Aайл file.txt получил статус modified.Теперь вернем файл в исходное состояние

	$git restore file.txt


!Псевдонимы команд
псевдоним для команды commit

	$git config --global alias.com commit
	//Теперь для создания коммитадостаточно ввести
	$git com


!Ветки. 
-позволяют вести параллельную работу над проектом, переключаясь по мере необходимости между ветками, решая различные задачи. По умолчанию у нас есть одна ветка - master. Обычно эту ветку считают основной. При создании новой ветки в ней будут копии файлов  проекта. В них код, а затем, когда задача будет выполнена, код  новой ветки сольем с основной веткой. Таким образом, можно параллельно вести работу над несколькими проблемами. При этом, при переключении между ветками, Git сам меняет файлы в папке с вашим проектом и  файлы будут исчезать, а показываться другие. Также будут меняться тексты файлов, если они отличаются от ветки к веткеогда вы в терминале будете менять ветку, то ваши файлы и тексты в них будут меняться в соответствии с веткой. Физически! Сами! Прям в открытом редакторе текст вашего файла будет меняться на другой!

!Создание новой ветки
создаются с помощью команды branch

	$git branch NAME
	//При этом будет создана новая ветка, однако переключения на нее не произойдет.

!Просмотр веток
Для того, чтобы просмотреть все ветки, которые есть в репозитории

	$git branch


!Переключение веток
Для этого используется команда checkout. После указывается имя ветки

	$git checkout test

Можно также использовать синоним switch:
git switch test













